#importing the dependenciesimport pandas as pdimport numpy as npfrom sklearn.preprocessing import StandardScalerfrom sklearn.model_selection import train_test_splitfrom sklearn import svmfrom sklearn.metrics import accuracy_score#Data Collection and Analysisdata = pd.read_csv("/Users/dex/Downloads/diabetes.csv")print(data.head())print(data.shape)print(data.describe())data["Outcome"].value_counts()'''0 --> Non- diabetic1 --> Diabetic'''data.groupby("Outcome").mean()#Separating the data and labels(features and target)X = data.drop(columns = "Outcome", axis = 1)Y = data["Outcome"]print(X)print(Y)#STANDARDIZATION OF DATAscaler = StandardScaler()standardized = scaler.fit_transform(X)print(standardized)#Train test splitX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, stratify = Y, random_state= 2)print(X.shape, X_test.shape, X_train.shape)classifier = svm.SVC(kernel = "linear")classifier.fit(X_train, Y_train)#Model Evaluation#Accuracy score on the training dataX_train_prediction = classifier.predict(X_train)training_data_accuracy = accuracy_score(X_train_prediction, Y_train)print("Accuracy score of the training data: ", training_data_accuracy)X_test_prediction = classifier.predict(X_test)test_data_accuracy = accuracy_score(X_test_prediction, Y_test)print("Accuracy score of the training data: ", test_data_accuracy)#Making a predictive systeminput_data = (4,110,92,0,0,37.6,0.191,30)#changeung the input data to a numpy arrayinput_data_as_numpy_array = np.asarray(input_data)#Reshape the array as we are predicting for one instanceinput_data_reshape = input_data_as_numpy_array.reshape(1,-1)# Standardize the inout datastd_data = scaler.transform(input_data_reshape)print(std_data)prediction = classifier.predict(std_data)print(prediction)if (prediction[0] == 0):    print("The patient is non-diabetic")else:    print("The patient is diabetic")